import { createSlice } from '@reduxjs/toolkit';
import { {{pascalCase name}} } from 'app/models';
import { AppHttpService, store } from 'app/shared';
import { ServiceOptions } from 'app/shared';

// Please open config.json and config-local.json and apply/paste the local mock data below to the services hash
// to setup intial api to work with mock data.
// "get{{pascalCase name}}$": { "localMockData": true }

export const get{{pascalCase name}}$ = () => {
    const serviceOptions: ServiceOptions = {
        serviceKey: 'get{{pascalCase name}}$',
        localDataPath: '/{{dashCase name}}.json',
        servicePath: '/{{dashCase name}}',
        params: {}
    };

    const httpSubject = AppHttpService.get$<{{pascalCase name}}>({{pascalCase name}}, serviceOptions);
    httpSubject.subscribe(({ payload }: any) => {
        store.dispatch({{camelCase name}}Slice.actions.load{{pascalCase name}}(payload));
    });
    return httpSubject;
};

export const post{{pascalCase name}}$ = (data: {{pascalCase name}}) => {
    const serviceOptions: ServiceOptions = {
        servicePath: '/{{dashCase name}}'
    };
    const httpSubject = AppHttpService.post$<{{pascalCase name}}>({{pascalCase name}}, serviceOptions, data);
    return httpSubject;
};

export const put{{pascalCase name}}$ = (id: string, data: {{pascalCase name}}) => {
    const httpSubject = AppHttpService.put$<{{pascalCase name}}>({{pascalCase name}}, { servicePath: '/{{camelCase name}}/{id}', params: { id } }, data);
    return httpSubject;
};

export const delete{{pascalCase name}}$ = (id: string) => {
    const httpSubject = AppHttpService.delete$<{{pascalCase name}}>({{pascalCase name}}, { servicePath: '/{{camelCase name}}/{id}', params: { id } });
    return httpSubject;
};

const initialGridState: Array<object> = [];
export const {{camelCase name}}Slice = createSlice({
    name: '{{dashCase name}}',
    initialState: initialGridState,
    reducers: {
        load{{pascalCase name}}: (state, action) => {
            return action.payload;
        }
    }
});

export const select{{pascalCase name}} = (state: any): Array<object> => state.{{camelCase name}}.map((o: any) => ({ ...o }));
